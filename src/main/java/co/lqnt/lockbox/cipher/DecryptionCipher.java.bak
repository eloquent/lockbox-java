/*
 * This file is part of the Lockbox package.
 *
 * Copyright Â© 2014 Erin Millard
 *
 * For the full copyright and license information, please view the LICENSE file
 * that was distributed with this source code.
 */

package co.lqnt.lockbox.cipher;

import co.lqnt.lockbox.cipher.exception.OutputSizeException;
import co.lqnt.lockbox.cipher.parameters.DecryptionCipherParametersInterface;
import java.nio.ByteBuffer;
import org.bouncycastle.crypto.engines.AESEngine;
import org.bouncycastle.crypto.macs.HMac;
import org.bouncycastle.crypto.modes.CBCBlockCipher;
import org.bouncycastle.crypto.paddings.PKCS7Padding;
import org.bouncycastle.crypto.paddings.PaddedBufferedBlockCipher;

/**
 * The key decryption cipher.
 */
public class DecryptionCipher implements DecryptionCipherInterface
{
    /**
     * Create a new key decryption cipher.
     */
    public DecryptionCipher()
    {
        this.cipher = new PaddedBufferedBlockCipher(
            new CBCBlockCipher(new AESEngine()),
            new PKCS7Padding()
        );
        this.buffer = null;
        this.blockMac = null;
        this.finalMac = null;
        this.isHeaderReceived = false;
    }

    /**
     * Initialize the cipher.
     *
     * @param parameters The parameters required by the cipher.
     */
    public void initialize(
        final DecryptionCipherParametersInterface parameters
    ) {
        this.parameters = parameters;
        this.buffer = ByteBuffer
            .allocate(36 + this.parameters.key().authenticationSecretBytes());
        this.isHeaderReceived = false;
    }

    /**
     * Get the size of the output buffer required for a process() call with an
     * input of the specified byte size.
     *
     * @param inputSize The input size in bytes.
     *
     * @return The output size in bytes.
     */
    public int processOutputSize(final int inputSize)
    {
        int size = inputSize +
            this.buffer.position() -
            this.parameters.key().authenticationSecretBytes();

        if (!this.isHeaderReceived) {
            size -= 18;
        }

        size = (int) Math.floor(size / 18) * 16;

        return this.cipher.getUpdateOutputSize(size);
    }

    /**
     * Process a single byte, producing an output block if necessary.
     *
     * @param input        The input byte.
     * @param output       The space for any output that might be produced.
     * @param outputOffset The offset to which the output will be copied.
     *
     * @return The number of bytes produced.
     * @exception IllegalStateException If the cipher isn't initialized.
     * @exception OutputSizeException   If there isn't enough space in output.
     */
    public int process(
        final byte input,
        final byte[] output,
        final int outputOffset
    ) throws
        IllegalStateException,
        OutputSizeException
    {
        return this.process(new byte[]{input}, 0, 1, output, outputOffset);
    }

    /**
     * Process an array of bytes, producing an output block if necessary.
     *
     * @param input        The input byte array.
     * @param inputOffset  The offset at which the input data starts.
     * @param size         The number of bytes to be read from the input array.
     * @param output       The space for any output that might be produced.
     * @param outputOffset The offset to which the output will be copied.
     *
     * @return The number of bytes produced.
     * @exception IllegalStateException If the cipher isn't initialized.
     * @exception OutputSizeException   If there isn't enough space in output.
     */
    public int process(
        final byte[] input,
        final int inputOffset,
        final int size,
        final byte[] output,
        final int outputOffset
    ) throws
        IllegalStateException,
        OutputSizeException
    {
        if (null == this.parameters) {
            throw new IllegalStateException("Cipher not initialized.");
        }

        int outputSize = this.getUpdateOutputSize(size);
        int ciphertextOffset = outputOffset +
            this.handleHeader(output, outputOffset, outputSize);

        this.internalCipher.processBytes(
            input,
            inputOffset,
            size,
            output,
            ciphertextOffset
        );

        if (outputSize > 0) {
            int ciphertextSize = outputSize;

            if (!this.isHeaderSent) {
                this.isHeaderSent = true;
                ciphertextSize -= 18;
            }

            this.authenticate(output, ciphertextOffset, ciphertextSize);
        }

        return outputSize;
    }

    /**
     * Get the size of the output buffer required for a process() call with an
     * input of the specified byte size plus a finalize() call.
     *
     * @param inputSize The input size in bytes.
     *
     * @return The output size in bytes.
     */
    public int finalOutputSize(final int inputSize)
    {
        int size = inputSize +
            this.buffer.position() -
            this.parameters.key().authenticationSecretBytes();

        if (!this.isHeaderReceived) {
            size -= 18;
        }

        size = (int) Math.floor(size / 18) * 16;

        return this.cipher.getOutputSize(size);
    }

    /**
     * Finalize the cipher output.
     *
     * @param output       The space for any output that might be produced.
     * @param outputOffset The offset to which the output will be copied.
     *
     * @return The number of bytes produced.
     * @exception IllegalStateException      If the cipher isn't initialized.
     * @exception OutputSizeException        If there isn't enough space in output.
     */
    public int finalize(final byte[] output, final int outputOffset)
        throws IllegalStateException, OutputSizeException
    {
//        if (null == this.iv) {
//            throw new IllegalStateException("Cipher not initialized.");
//        }
//
//        int outputSize = this.getOutputSize(0);
//        int ciphertextOffset = outputOffset +
//            this.handleHeader(output, outputOffset, outputSize);
//
//        this.internalCipher.doFinal(output, ciphertextOffset);
//
//        int ciphertextSize;
//        if (outputSize > 0) {
//            ciphertextSize = outputSize - this.finalMac.getMacSize();
//
//            if (!this.isHeaderSent) {
//                this.isHeaderSent = true;
//                ciphertextSize -= 18;
//            }
//
//            this.authenticate(output, ciphertextOffset, ciphertextSize);
//        } else {
//            ciphertextSize = 0;
//        }
//
//        byte[] mac = new byte[this.finalMac.getMacSize()];
//        this.finalMac.doFinal(mac, 0);
//
//        System.arraycopy(
//            mac,
//            0,
//            output,
//            ciphertextOffset + ciphertextSize,
//            mac.length
//        );
//
//        return outputSize;
    }

    /**
     * Reset the cipher to its state after the last initialize() call.
     */
    public void reset()
    {
        this.cipher.reset();
        this.buffer = ByteBuffer
            .allocate(36 + this.parameters.key().authenticationSecretBytes());
        this.isHeaderReceived = false;
    }

    final private PaddedBufferedBlockCipher cipher;
    private DecryptionCipherParametersInterface parameters;
    private ByteBuffer buffer;
    private HMac blockMac;
    private HMac finalMac;
    private boolean isHeaderReceived;
}
